#version 100
precision mediump float;
precision highp int;

struct Material
{
    highp vec4 diffuse;
    highp vec4 specular;
    highp vec4 ambient;
    highp float shininess;
};

struct Light
{
    highp vec3 pos;
    highp vec3 intensity;
    bool activated;
};

uniform Material mat;
uniform highp vec3 lightDir;
uniform highp vec3 camPos;
uniform Light lights[10];
uniform highp vec3 lightIntensity;
uniform highp mat4 view;
uniform highp mat4 projection;

varying highp vec3 frag_pos;
varying highp vec3 frag_normal;
varying highp vec2 frag_texCoord;

void main()
{
    highp vec3 ambient = mat.ambient.xyz;
    highp vec3 nLightDir = normalize(lightDir);
    highp vec3 light = vec3(0.0);
    highp vec3 V = normalize(camPos - frag_pos);
    for (int i = 0; i < 10; i++)
    {
        Light l = lights[i];
        if (l.activated)
        {
            highp vec3 L = -normalize(frag_pos - l.pos);
            highp float dist = distance(frag_pos, l.pos);
            highp float att = 1.0 / ((1.0 + (0.100000001490116119384765625 * dist)) + ((0.00999999977648258209228515625 * dist) * dist));
            highp vec3 diffuse = (mat.diffuse.xyz * clamp(dot(L, frag_normal), 0.0, 1.0)) * l.intensity;
            highp vec3 specular = ((mat.specular.xyz * pow(clamp(dot(normalize(frag_normal), normalize(L + V)), 0.0, 1.0), mat.shininess)) * vec3(0.300000011920928955078125)) * l.intensity;
            light += (clamp(diffuse + specular, vec3(0.0), vec3(1.0)) * att);
        }
    }
    light += ((mat.diffuse.xyz * clamp(dot(-nLightDir, normalize(frag_normal)), 0.0, 1.0)) * lightIntensity);
    light += ((mat.specular.xyz * pow(clamp(dot(normalize(-nLightDir + V), normalize(frag_normal)), 0.0, 1.0), mat.shininess)) * lightIntensity);
    gl_FragData[0] = vec4(light + ambient, mat.diffuse.w);
}

