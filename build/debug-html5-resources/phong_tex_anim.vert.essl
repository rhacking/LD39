#version 100

uniform mat4 transforms[50];
uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

attribute vec3 jointIndices;
attribute vec3 position;
attribute vec3 weights;
attribute vec3 normal;
varying vec3 frag_pos;
varying vec2 frag_texCoord;
attribute vec2 texCoord;
attribute vec3 tangent;
varying mat3 TBN;

void main()
{
    vec4 modelPos = vec4(0.0);
    vec4 modelNorm = vec4(0.0);
    for (int i = 0; i < 3; i++)
    {
        if (int(jointIndices[i]) >= 0)
        {
            mat4 jointTransform = transforms[int(jointIndices[i])];
            vec4 jointPos = jointTransform * vec4(position, 1.0);
            modelPos += (jointPos * weights[i]);
            vec4 jointNorm = jointTransform * vec4(normalize(normal), 0.0);
            modelNorm += (jointNorm * weights[i]);
        }
    }
    gl_Position = ((projection * view) * model) * modelPos;
    frag_pos = (model * modelPos).xyz;
    frag_texCoord = texCoord;
    vec3 T = normalize(vec3((model * vec4(tangent, 0.0)).xyz));
    vec3 N = normalize(vec3((model * vec4(normal, 0.0)).xyz));
    vec3 B = normalize(cross(T, N));
    TBN = mat3(vec3(T), vec3(B), vec3(N));
}

