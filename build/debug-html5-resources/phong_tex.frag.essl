#version 100
precision mediump float;
precision highp int;

struct Material
{
    highp vec4 diffuse;
    highp vec4 specular;
    highp float shininess;
    highp sampler2D diffuseTex;
    highp sampler2D specularTex;
    highp sampler2D normalTex;
};

struct Light
{
    highp vec3 pos;
    highp vec3 intensity;
    bool activated;
};

uniform highp vec3 lightDir;
uniform Material mat;
uniform bool useNormalNormal;
uniform Light lights[20];
uniform highp vec3 lightIntensity;
uniform highp mat4 view;
uniform highp mat4 projection;
uniform highp vec3 camPos;

varying highp vec2 frag_texCoord;
varying highp mat3 TBN;
varying highp vec3 frag_pos;

void main()
{
    highp vec3 ambient = vec3(0.0199999995529651641845703125);
    highp vec3 nLightDir = normalize(lightDir);
    highp vec3 light = vec3(0.0);
    highp vec3 frag_normal = texture2D(mat.normalTex, frag_texCoord).xyz;
    frag_normal = normalize((frag_normal * 2.0) - vec3(1.0));
    frag_normal = normalize(TBN * frag_normal);
    if (useNormalNormal)
    {
        frag_normal = TBN[2];
    }
    for (int i = 0; i < 20; i++)
    {
        Light l = lights[i];
        if (l.activated)
        {
            highp vec3 L = -normalize(frag_pos - l.pos);
            highp float dist = distance(frag_pos, l.pos);
            highp float att = 1.0 / ((1.0 + (0.100000001490116119384765625 * dist)) + ((0.00999999977648258209228515625 * dist) * dist));
            highp vec3 diffuse = ((mat.diffuse.xyz * texture2D(mat.diffuseTex, frag_texCoord).xyz) * clamp(dot(L, frag_normal), 0.0, 1.0)) * l.intensity;
            light += (clamp(diffuse, vec3(0.0), vec3(1.0)) * att);
        }
    }
    light += ((texture2D(mat.diffuseTex, frag_texCoord).xyz * clamp(dot(-nLightDir, frag_normal), 0.0, 1.0)) * lightIntensity);
    gl_FragData[0] = vec4(light + ambient, 1.0) + vec4(0.00999999977648258209228515625);
}

